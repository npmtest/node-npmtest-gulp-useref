{"/home/travis/build/npmtest/node-npmtest-gulp-useref/test.js":"/* istanbul instrument in package npmtest_gulp_useref */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-useref/lib.npmtest_gulp_useref.js":"/* istanbul instrument in package npmtest_gulp_useref */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_useref = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_useref = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-useref/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-useref && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_useref */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_useref\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_useref.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_useref.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_useref.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_useref.__dirname + '/lib.npmtest_gulp_useref.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-useref/node_modules/gulp-useref/index.js":"'use strict';\nvar path = require('path'),\n    gutil = require('gulp-util'),\n    es = require('event-stream'),\n    through = require('through2'),\n    useref = require('useref'),\n    getGlobs = require('./lib/getGlobs'),\n    addFilesFromExtStreams = require('./lib/addFilesFromExtStreams'),\n    addHtmlToStream = require('./lib/addHtmlToStream'),\n    unprocessedCounter = require('./lib/unprocessedCounter')(),\n    end = require('./lib/end')(),\n    additionalFiles = [],\n    transforms,\n    pluginOptions;\n\nfunction handleAdditionalStreams(additionalStreams) {\n    var _additionalStreams = additionalStreams;\n\n    if (!Array.isArray(additionalStreams)) {\n        _additionalStreams = [ additionalStreams ];\n    }\n\n    return _additionalStreams.map(function (stream) {\n        // filters stream to select needed files\n        return stream.pipe(es.through(function (file) {\n            additionalFiles.push(file);\n        }));\n    });\n}\n\nfunction addAssetsToStream(paths, files) {\n    var self = this,\n        gulpif = require('gulp-if'),\n        concat = require('gulp-concat'),\n        isRelativeUrl = require('is-relative-url'),\n        vfs = require('vinyl-fs'),\n        src,\n        globs,\n        name = paths.name,\n        basePath = paths.basePath,\n        filepaths = files[name].assets,\n        options = pluginOptions,\n        gulpConcatOptions = {};\n\n    if (!filepaths.length) {\n        return;\n    }\n\n    unprocessedCounter.increment();\n\n    // Get relative file paths and join with search paths to send to vinyl-fs\n    globs = filepaths\n        .filter(isRelativeUrl)\n        .map(function (filepath) {\n            paths.filepath = filepath;\n\n            return getGlobs(paths, files);\n        });\n\n    src = vfs.src(globs, {\n        base: basePath,\n        nosort: true\n    })\n    .on('error', function (err) {\n        self.emit('error', new Error(err));\n    });\n\n    // add files from external streams\n    src = addFilesFromExtStreams.call(self, additionalFiles, globs, src);\n\n    // If any external transforms were included, pipe all files to them first\n    transforms.forEach(function (fn) {\n        src = src.pipe(fn(name));\n    });\n\n    // option for newLine in gulp-concat\n    if (options.hasOwnProperty('newLine')) {\n        gulpConcatOptions.newLine = options.newLine;\n    }\n\n    // Add assets to the stream\n    // If noconcat option is false, concat the files first.\n    src\n        .pipe(gulpif(!options.noconcat, concat(name, gulpConcatOptions)))\n        .pipe(through.obj(function (newFile, encoding, callback) {\n            // specify an output path relative to the cwd\n            if (options.base) {\n                newFile.path = path.join(options.base, name);\n                newFile.base = options.base;\n            }\n\n            // add file to the asset stream\n            self.push(newFile);\n            callback();\n        }))\n        .on('finish', function () {\n            var unprocessed = unprocessedCounter.decrement();\n\n            if (unprocessed === 0 && end.get()) {\n                // end the asset stream\n                end.fn();\n            }\n        });\n}\n\nfunction processAssets(file, basePath, data) {\n    var self = this,\n        types = pluginOptions.types || [ 'css', 'js' ];\n\n    types.forEach(function (type) {\n        var files = data[type],\n            name;\n\n        if (!files) {\n            return;\n        }\n\n        for (name in files) {\n            addAssetsToStream.call(self, {\n                name: name,\n                basePath: basePath,\n                searchPath: pluginOptions.searchPath,\n                cwd: file.cwd,\n                transformPath: pluginOptions.transformPath\n            }, files);\n        }\n    });\n}\n\nmodule.exports = function (options) {\n    var opts = options || {},\n        waitForAssets,\n        additionalStreams;\n\n    pluginOptions = opts;\n    transforms = Array.prototype.slice.call(arguments, 1);\n\n    // If any external streams were included, add matched files to src\n    if (opts.additionalStreams) {\n        additionalStreams = handleAdditionalStreams(opts.additionalStreams);\n\n        // If we have additional streams, wait for them to run before continuing\n        waitForAssets = es.merge(additionalStreams).pipe(through.obj());\n    } else {\n        // Else, create a fake stream\n        waitForAssets = through.obj();\n    }\n\n    return through.obj(function (file, enc, cb) {\n        var self = this;\n\n        waitForAssets.pipe(es.wait(function () {\n            var output,\n\n                // Cache the file base path relative to the cwd\n                // Use later when it could be dropped\n                _basePath = path.dirname(file.path);\n\n            if (file.isNull()) {\n                return cb(null, file);\n            }\n\n            if (file.isStream()) {\n                return cb(new gutil.PluginError('gulp-useref', 'Streaming not supported'));\n            }\n\n            output = useref(file.contents.toString(), opts);\n\n            addHtmlToStream.call(self, file, output[0]);\n\n            if (!opts.noAssets) {\n                processAssets.call(self, file, _basePath, output[1]);\n            }\n\n            return cb();\n        }));\n\n        // If no external streams were included,\n        // emit 'end' on the empty stream\n        if (!additionalStreams) {\n            waitForAssets.emit('end');\n        }\n    }, function (cb) {\n        var unprocessed = unprocessedCounter.get(),\n            fn = function () {};\n\n        end.set(cb);\n\n        if (unprocessed === 0) {\n            fn = cb;\n        }\n\n        return fn();\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-useref/node_modules/gulp-useref/lib/getGlobs.js":"'use strict';\n\nvar getPattern = require('./getPattern');\n\nmodule.exports = function (paths, files) {\n    var pattern,\n        matches,\n        glob = require('glob'),\n        searchPath = paths.searchPath,\n        name = paths.name,\n        cwd = paths.cwd,\n        basePath = paths.basePath,\n        filepath = paths.filepath,\n        transformPath = paths.transformPath;\n\n    if (searchPath && Array.isArray(searchPath)) {\n        searchPath = searchPath.length === 1 ? searchPath[0] : '{' + searchPath.join(',') + '}';\n    }\n\n    pattern = getPattern(files, {\n        destPath: name,\n        searchPath: searchPath,\n        cwd: cwd,\n        basePath: basePath,\n        srcPath: filepath\n    });\n\n    matches = glob.sync(pattern, { nosort: true });\n\n    if (!matches.length) {\n        matches.push(pattern);\n    }\n\n    if (transformPath) {\n        matches[0] = transformPath(matches[0]);\n    }\n\n    return matches[0];\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-useref/node_modules/gulp-useref/lib/getPattern.js":"'use strict';\n\nvar path = require('path');\n\nmodule.exports = function (files, paths) {\n    var searchPaths,\n        destPath = paths.destPath,\n        searchPath = paths.searchPath,\n        cwd = paths.cwd,\n        basePath = paths.basePath,\n        srcPath = paths.srcPath;\n\n    if (files[destPath].searchPaths || searchPath) {\n        searchPaths = path.resolve(cwd, files[destPath].searchPaths || searchPath);\n    }\n    return (searchPaths || basePath) + path.sep + srcPath;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-useref/node_modules/gulp-useref/lib/addFilesFromExtStreams.js":"'use strict';\n\nvar reorderTheStream = require('./reorderTheStream');\n\nmodule.exports = function (additionalFiles, globs, src) {\n    var self = this,\n        source;\n\n    additionalFiles.forEach(function (addFile) {\n        src.push(addFile);\n    });\n\n    // if we added additional files, reorder the stream\n    if (additionalFiles.length > 0) {\n        source = reorderTheStream.call(self, globs, src);\n    }\n\n    return source || src;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-useref/node_modules/gulp-useref/lib/reorderTheStream.js":"'use strict';\n\nvar through = require('through2');\n\nmodule.exports = function (globs, src) {\n    var self = this,\n        sortIndex = {},\n        i = 0,\n        sortedFiles = [],\n        unsortedFiles = [];\n\n    // Create a sort index so we don't iterate over the globs for every file\n    globs.forEach(function (filename) {\n        sortIndex[filename] = i++;\n    });\n\n    return src.pipe(through.obj(function (srcFile, encoding, callback) {\n        var index = sortIndex[srcFile.path];\n\n        if (index === undefined) {\n            unsortedFiles.push(srcFile);\n        } else {\n            sortedFiles[index] = srcFile;\n        }\n        callback();\n    }, function (callback) {\n        sortedFiles.forEach(function (sorted) {\n            if (sorted !== undefined) {\n                this.push(sorted);\n            }\n        }, self);\n\n        unsortedFiles.forEach(function (unsorted) {\n            this.push(unsorted);\n        }, self);\n        callback();\n    }));\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-useref/node_modules/gulp-useref/lib/addHtmlToStream.js":"'use strict';\n\nvar gutil = require('gulp-util');\n\nmodule.exports = function (file, data) {\n    var self = this;\n\n    try {\n        file.contents = new Buffer(data);\n        self.push(file);\n    } catch (err) {\n        self.emit('error', new gutil.PluginError('gulp-useref', err));\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-useref/node_modules/gulp-useref/lib/unprocessedCounter.js":"'use strict';\n\nmodule.exports = function () {\n    var unprocessed = 0;\n\n    return {\n        get: function () {\n            return unprocessed;\n        },\n\n        increment: function () {\n            return unprocessed++;\n        },\n\n        decrement: function () {\n            return --unprocessed;\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-useref/node_modules/gulp-useref/lib/end.js":"'use strict';\n\nmodule.exports = function () {\n    var _end;\n\n    function get() {\n        return _end;\n    }\n\n    function set(cb) {\n        _end = cb;\n\n        return _end;\n    }\n\n    function fn() {\n        return _end();\n    }\n\n    return {\n        get: get,\n        set: set,\n        fn: fn\n    };\n};\n"}